/** -------------------------------------------------------------------------- **/
/** Base **/
/** -------------------------------------------------------------------------- **/

#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstdlib>
#include <numeric>
#include <string>
#include <sstream>
#include <iomanip>
#include <locale>
#include <bitset>
#include <map>
#include <vector>
#include <queue>
#include <stack>
#include <algorithm>
#include <cmath>

#define INF 0x3F3F3F3F
#define PI 3.14159265358979323846
#define EPS 1e-10

#define file_in(file) freopen(file".in", "r", stdin)
#define file_out(file) freopen(file".out", "w+", stdout)
#define vet_i(var, tipo, lin, col, inic) vector< vector< tipo > > var (lin, vector< tipo > (col, inic))
#define vet_d(tipo) vector< vector< tipo > >
#define lli long long int
#define llu unsigned long long int
#define fore(var, inicio, final) for(int var=inicio; var<final; var++)
#define forec(var, inicio, final, incremento) for(int var=inicio; var<final; incremento)
#define forit(it, var) for( it = var.begin(); it != var.end(); it++ )

using namespace std;


int main(){
	
	
    return 0;
}

/** -------------------------------------------------------------------------- **/
/** Funções Primo **/
// Verifica se um valor é primo
/** -------------------------------------------------------------------------- **/

bool primo(long int n){
    if(n < 1) return false;
    else if(n == 2) return true;
    else if(n%2 == 0) return false;

    for(int i=3; i*i<=n; i+=2){
        if(n%i == 0) return false;
    }
    return true;
}

/** -------------------------------------------------------------------------- **/
/** Funções Primo **/
// Retorna os primos até a raiz de N
// is_prime com crivo
// PEga os primos no intervalo
/** -------------------------------------------------------------------------- **/

vi primes;

void crivo_primes(){
    bitset<N> bs;

    bs.set();
    bs[0] = 0;
    bs[1] = 0;

    for(llu i=2; i<N; i++){
        if(bs[i]){
            for(llu j = i*i; j<N; j+=i)
                bs[j] = 0;
            primes.push_back(i);
        }
    }
}

bool is_prime(llu num){
    for(llu i = 0; i < primes.size() && primes[i]*primes[i] <= num; i++){
        if(num%primes[i] == 0) return false;
    }
    return true;
}

vi get_primes(llu a, llu b){
    vi r;

    if(a < 2) a = 2;
    if(b < 2) b = 2;
    for(llu i=a; i<=b; i++){
        if(is_prime(i)){
            r.push_back(i);
            /*cout<<i<<" ";*/
        }
    }

    return r;
}

/** -------------------------------------------------------------------------- **/
/** Retorna a quantidade de fatores primos **/
// Contar o numero de fatores primos de N
// Contar o numero de diferentes fatores primos de N
// Somar os fatores primos de N
// Contar o número de divisores de N
// -> N = a^i x b^j...c^k => (i+1)x(j+1)...(k+1)
// Somar os divisores de N
// -> ans *=> (lli) (pow(pr, power) + 1)/ (pr - 1);
// -> if(n != 1) ans *=> (pow(n, 2) - 1) / (n - 1);
/** -------------------------------------------------------------------------- **/

vector <int> fator_primo(lli n){
	vector <int> fatores;
	lli pr_index = 0, pr = primes[pr_index];
	// Para quando primo < sqrt(n) ou rodou todos os primos
	while(n != 1 && (pr*pr) <= n && pr_index < primes.size()){ 
		// Inseri todos os pr's possiveis (até repetidos)
		while(n % pr == 0){ n /= pr; fatores.push_back(pr); }
		pr = primes[++pr_index];
	}
	
	if(n != 1) fatores.push_back(n);
	return fatores;
}

/** -------------------------------------------------------------------------- **/
/** Retorna o MMC ou MDC **/
// Maximo Divisor Comum (GCD)
// Minimo Multiplo Comum (LCM)
/** -------------------------------------------------------------------------- **/

lli gcd(lli a, lli b){
    return (b == 0) ? a : gcd(b, a%b);
}

lli lcm(lli a, lli b){
    lli temp = gcd(a, b);
    return temp ? (a / temp * b) : 0;
}

/** -------------------------------------------------------------------------- **/
/** Operações de Mod **/
// a^b % c
/** -------------------------------------------------------------------------- **/

lli mod(lli a, lli b, lli c){
    if(b==0) return 1;
    if(b%2==0){
        lli x = mod(a, b/2, c);
        return (x*x)%c;
    }
    else return (a%c * mod(a,b-1,c))%c;
}

int main(void){

    lli r, b, p, m;

    /*
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
    */

    while(cin>>b>>p>>m){
        r = mod(b, p, m);
        cout<<r<<endl;
    }

    return 0;
}

/** -------------------------------------------------------------------------- **/
/** Aritmetica Modula **/
/** -------------------------------------------------------------------------- **/

// Soma
(x + y) mod n =>
((x mod n) + (y mod n)) mod n

// Multiplicacao
(x.y) mod n =>
((x mod n) . (y mod n)) mod n

// Exponencial
(x^y) mod n =>
((x mod n) ^ y) mod n

// Exponencial alto
// -> Divida y/2 e realiza a conta e multiplica seu resultado
//    5^117 mod 19.
//    117 = 1110101 em binario.
//    117 = (2^0 + 2^2 + 2^4 + 2^5 + 2^6)
//    117 = 1 + 4 + 16 + 32 + 64
//    5^117 mod 19 = 5^(1+4+16+32+64) mod 19
//    5^117 mod 19 = (5^1 x 5^4 x 5^16 x 5^32 x 5^64) mod 19

/** -------------------------------------------------------------------------- **/
/** Retorna os valores de x, y e mdc **/
// euclid_estendido
// -> calcula a.x + b.y = gcd(a, b); [= maximo divisor commum]
// diofantinas
// -> calcula a.s.k + b.t.k = c; [k = c / gcd(a, b)]
/** -------------------------------------------------------------------------- **/

void euclid_estendido(lli a, lli b, lli &alpha, lli &beta, lli &mdc){
    lli x[] = {1, 0};
    lli y[] = {0, 1};

    while(a%b != 0){
        lli quo = a/b;
        lli temp = a;
        a = b;
        b = temp%b;

        lli xa = x[0] - (x[1]*quo);
        lli ya = y[0] - (y[1]*quo);

        x[0] = x[1];
        x[1] = xa;
        y[0] = y[1];
        y[1] = ya;
    }

    mdc = b;
    alpha = x[1];
    beta = y[1];
}

void diofantinas(lli a, lli b, lli c, lli &alpha, lli &beta){
	lli d = gcd(a, b), mdc, k;
	if(c % d != 0) return; //Não deu certo--
	k = c/d;

	euclid_estendido(a, b, alpha, beta, mdc);

    alpha *= k;
    beta *= k;
}

/** -------------------------------------------------------------------------- **/
/** Fibonnaci **/
// Zeckendorf:
// Todo inteiro positivo pode ser escrito de maneira 'unica' como uma soma de 
// elementos da sequencia de fibonnaci.
// -> sempre pegar o maior possivel
// Pisano Period:
// Os uultimos um/dois/tres/quatro digitos de um numero de Fibonacci se
// repetem em periodos de 60/300/1500/15000, respectivamente.
/** -------------------------------------------------------------------------- **/

// Recursivo
int fibonnaci_rec(int n){
	if(n < 2) return n;
	return fibonnaci_rec(n-1) + fibonnaci_rec(n-2);
}

// Iterativo
int fibonnaci_itt(int n){
	int fa = 0, fc = 1, aux;
	
	fore(i, 0, n){
		aux = fc;
		fc += fa;
		fa = aux;
	}
	
	return fc;
}

/** -------------------------------------------------------------------------- **/
/** Coeficientes Binomiais **/
// -> C(n,k) = C(n-1,k-1) + C(n-1,k)
// -> C(n, 0) = C(n, n) = 1;
// Para muitos casos: triangulo de pascal
// n = 0 => 1
// n = 1 => 1 1
// n = 2 => 1 2 1
// n = 3 => 1 3 3 1
// n = 4 => 1 4 6 4 1
/** -------------------------------------------------------------------------- **/

// Recursivo
int c_binomial(int n, int k){
	if(k == 0 || n == k) return 1;
	return c_binomial(n-1, k-1) + c_binomial(c-1, k);
}

// Iterativo
int fibonnaci_itt(int n){
	int fa = 0, fc = 1, aux;
	
	fore(i, 0, n){
		aux = fc;
		fc += fa;
		fa = aux;
	}
	
	return fc;
}

/** -------------------------------------------------------------------------- **/
/** Catalan Recorrente **/
// -> C(n) = (2*(2n+1)/(n+2)) * C(n-1);
// -> C(0) = 1
/** -------------------------------------------------------------------------- **/

lli catalan[30];
int catalan_solve(){
    catalan[0]=1;
    fore(i, 0, 25){
        catalan[i+1] = (catalan[i] * (4*i + 2))/(i + 2);
    }
}

/** -------------------------------------------------------------------------- **/
/** Fatorial e Complemento NP **/
/** -------------------------------------------------------------------------- **/

lli fat(lli num){
    lli r = 1;
    fore(i, 2, num+1){
        r *= i;
    }
    return r;
}

lli comp(lli n, lli p){
    if(n < p || p == n || p == 0) return 1;
    else if(p == 1) return n;

    lli top = 1, bottom;
    fore(i, p+1, n+1) top *= i;
    bottom = fat(n-p);

    return (top/bottom);
}

/** -------------------------------------------------------------------------- **/
/** Soma Max (1D) **/
// Retorna um subsequencia de maior soma
/** -------------------------------------------------------------------------- **/

int soma_max_1d(vector <int> &v){
    int n = v.size();
    int r, sum;

    r = sum = 0;
    fore(i, 0, n){
        sum += v[i];
        r = max(r, sum);
        if(sum < 0) sum = 0;
    }
}

//////////////////////////

int soma_max_1d(vector <int> &v, int &xi, int &xf){
    int n = v.size();
    int r, sum, inicio, iniciocmp;

    if(n <= 0) return 0;

    r = sum = 0;
    xi = xf = inicio = 0;
    bool cmp = true;

	// Retorna indices
    fore(i, 0, n){
        sum += v[i];

        if(sum < 0){
            inicio = i + 1;
            sum = 0;
        }
        if(sum > r || (sum == r && (xf-xi < i- inicio))){
            r = sum;
            xi = inicio;
            xf = i;
        }
    }

    return r;
}

/** -------------------------------------------------------------------------- **/
/** Mochila **/
// O maior valor de itens que cabem na mochila
// -> wm peso max utilizado
// -> pc quantidade de itens na mochila
/** -------------------------------------------------------------------------- **/

int knapSack(int W, vector <int> &wt, vector <int> &val, int n, int &wm, int &pc){
    int i, w;
    int K[n+1][W+1];

    // Build table K[][] in bottom up manner
    for (i = 0; i <= n; i++){
        for (w = 0; w <= W; w++){
            if(i==0 || w==0)
                K[i][w] = 0;
            else if(wt[i-1] <= w)
                K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);
            else
                K[i][w] = K[i-1][w];
        }
    }

    int resp = K[n][W], c = 0;

    // Retorna peso utilizado
    for(int i=0; i<(W+1); i++){
        if(resp == K[n][i]){wm = i; break;}
    }

    // Retorna qtde de itens na mochila
    int nc = n, Wc = W;
    while(nc>=1){
        if(nc >= 0 && Wc - wt[nc-1] >= 0)
        if((K[nc][Wc] - val[nc-1]) == K[nc-1][Wc - wt[nc-1]]){
            c++; Wc -= wt[nc-1];
        }
        nc--;
    }
    pc = c;

    return resp;
}

/** -------------------------------------------------------------------------- **/
/** Troco **/
// Dado um conjunto de moedas, retorne a menor quantidade de moedas necessarias
// para revolver um troco X
/** -------------------------------------------------------------------------- **/

int troco_1d(vector<int> &moedas, int valor){
    vector<int> usadas;
    int troco[valor+1], n = moedas.size();

    troco[0] = 0;
    fore(i, 1, valor+1){
        troco[i] = INF;
        fore(j, 0, n){
            if(i >= moedas[j])
                troco[i] = min(troco[i], 1+ troco[i-moedas[j]]);
        }
    }

    // Retorna as moedas utilizadas
    int i = valor;
    while(i >= 0 && troco[i] != 0){
        fore(j, 0, n){
            if(i >= moedas[j] && troco[i-moedas[j]] + 1 == troco[i]){
                i -= moedas[j];
                usadas.push_back(moedas[j]);
            }
        }
    }
    fore(a, 0, usadas.size()) cout<<usadas[a]<<" ";

    return troco[valor];
}

/** -------------------------------------------------------------------------- **/
/** Subset Sum **/
// Verifica se há uma soma com a quantida int sum
/** -------------------------------------------------------------------------- **/

bool subset_sum(vector<int> &vet, int sum){
    /* Os valores subset[i][j] representa subset do
       vet[0..j-1] que a soma é equivalente a i */
    int n = vet.size();
    bool subset[sum+1][n+1];

    /* Caso base: nenhum elemento */
    for(int j = 0; j < n+1; j++) subset[0][j] = true;

    /* De mais valores false */
    for(int i = 1; i < sum+1; i++) subset[i][0] = false;

    /* Preenchimento bottomup */
    for(int i = 1; i < sum+1; i++){
        for(int j = 1; j < n+1; j++){
            subset[i][j] = subset[i][j-1];
            if(i >= vet[j-1])
                subset[i][j] = subset[i][j] || subset[i - vet[j-1]][j-1];
        }
    }

    /*
    for(int i = 0; i <= sum; i++){
        for (int j = 0; j <= n; j++)
            printf("%4d", subset[i][j]);
        printf("\n");
    } */

    return subset[sum][n];
}

int main(void){

    vector<int> vet;
    vet.push_back(9); vet.push_back(7);
    vet.push_back(5); vet.push_back(3);
    vet.push_back(2);

    cout<<"Subset Sum"<<endl;
	cout<<"resposta :"<<subset_sum(vet, 12)<<endl<<endl;

    return 0;
}

/** -------------------------------------------------------------------------- **/
/** Operações com String **/
/** -------------------------------------------------------------------------- **/

// Passa um valor inteiro para uma string
string r;
stringstream strstrem;

strstrem<<n;
strstrem>>r;

// Formata um char*
char buffer [50];
int n, a=5, b=3;
n=sprintf (buffer, "%d plus %d is %d", a, b, a+b);
printf ("[%s] is a string %d chars long\n",buffer,n);

/** -------------------------------------------------------------------------- **/
/** Ler inteiros até um \n **/
/** -------------------------------------------------------------------------- **/

int main() {
    std::string tmp;
    while(std::getline(std::cin, tmp)) {
        std::vector<int> nums;
        std::stringstream ss(tmp);
        int ti;
        while(ss >> ti) 
            nums.push_back(ti);
        //do stuff with nums
    }
    return 0;
}

/** -------------------------------------------------------------------------- **/
/** LCS **/
// Retorna o maior subconjunto de caracteres iguais
/** -------------------------------------------------------------------------- **/

using namespace std;

/* Returns length of LCS for X[0..m-1], Y[0..n-1] */
int lcs(string &X, string &Y){
    int m = X.size(), n = Y.size();
    int L[m+1][n+1];

    /* Construindo a L[m+1][n+1] */
    for(int i=0; i<m+1; i++){
        for(int j=0; j<n+1; j++){
            /* Caso base: nenhum caractere */
            if(i == 0 || j == 0) L[i][j] = 0;
            /* Se forem iguais soma 1 com o resultado anterior */
            else if(X[i-1] == Y[j-1]) L[i][j] = L[i-1][j-1] + 1;
            /* Se não pega o máximo do X(i-1), Y(j-1) */
            else L[i][j] = max(L[i-1][j], L[i][j-1]);
        }
    }

    /* Resultado final: L[m][n] */
    return L[m][n];
}

int main(){
    string X = "AGGTAB";
    string Y = "GXTXAYB";

    printf("Length of LCS is %d\n", lcs(X, Y) );

    return 0;
}

/** -------------------------------------------------------------------------- **/
/** Distancia de levenstein **/
// Quantas operacoes sao necessarias ára transformar uma string na outra
/** -------------------------------------------------------------------------- **/

int levenshtein_distance(string &x, int len_x, string &y, int len_y){
    int custo, custo_min;

    /* caso base: strings vazias */
    if(len_x == 0) return len_y;
    if(len_y == 0) return len_x;

    /* testa se o ultimo caractere das strings combinam */
    if(x[len_x-1] == y[len_y-1]) custo = 0;
    else custo = 1;

    /* retorna o minimo da deleção do char x, deleção char y, e deleção char dos dois */
    custo_min = min(levenshtein_distance(x, len_x - 1, y, len_y    ) + 1,
                    levenshtein_distance(x, len_x    , y, len_y - 1) + 1);
    custo_min = min(levenshtein_distance(x, len_x - 1, y, len_y - 1) + custo, custo_min);

    return custo_min;
}

typedef struct {
    int val;
    char op;
    /* s - substituição, i - inserção, d - deleção, v - vazio */
} lev_data;

int levenshtein_bottomup(string &x, string &y){
    int custo, mat_min;
    char op;

    /* Matriz de operacoes */
    int x_len = x.size()+1, y_len = y.size()+1;
    vector< vector< lev_data > > mat (x_len, vector< lev_data > (y_len));

    fore(i, 0, x_len){ mat[i][0].val = i; mat[i][0].op = 'v'; }
    fore(j, 0, y_len){ mat[0][j].val = j; mat[0][j].op = 'v'; }

    fore(i, 1, x_len){
        fore(j, 1, y_len){
            /* Determina custo */
            if(x[i-1] == y[j-1]) custo = 0;
            else custo = 1;
            /* Função minimo */
            mat_min = mat[i-1][j].val + 1; op = 'd';
            if(mat_min > mat[i][j-1].val + 1){
                mat_min = mat[i][j-1].val + 1; op = 'i';
            }
            if(mat_min > mat[i-1][j-1].val + custo){
                mat_min = mat[i-1][j-1].val + custo; op = 's';
            }
            /* Preenche matriz */
            mat[i][j].val = mat_min;
            mat[i][j].op = op;
        }
    }

    /*fore(j, 0, y_len){
        fore(i, 0, x_len){
            cout<<"["<<mat[i][j].op<<"] "<<mat[i][j].val<<" ";
        }
        cout<<endl;
    }*/

    return mat[x.size()][y.size()].val;
}

int main(void){

    cout<<"Levenshtein Distance"<<endl;
    string s1 = "camelo";
    string s2 = "calo";
    cout<<"topdown : "<<levenshtein_distance(s1, s1.size(), s2, s2.size())<<endl;
    cout<<"bottomup: "<<levenshtein_bottomup(s1, s2)<<endl;

    return 0;
}

/** -------------------------------------------------------------------------- **/
/** Grafo DFS **/
// Retorna as conexões de um vertice a outro
/** -------------------------------------------------------------------------- **/

// Variáveis do DFS Graph
// O(V + E) -> O(V^2)
// DFS is not only useful for traversing a graph. It can be used to solve many other graph problems.
// - Finding Connected Components in Undirected Graph
#define DFS_WHITE -1
#define DFS_BLACK 1
#define V 10

int dfs_num[V];
void dfs_graph(int u){
    cout<<u<<" "; dfs_num[u] = DFS_BLACK; // this vertex is visited, mark it
    forit(v, adj_list[u]){ // try all neighbors v of vertex u
        if(dfs_num[v->first] == DFS_WHITE) // avoid cycle
            dfs(v->first); // v is a (neighbor, weight) pair
    }
}

int main(){

    // inside int main()
    numComponent = 0;
    memset(dfs_num, DFS_WHITE, sizeof dfs_num);
    fore(i, 0, V - 1){
        if (dfs_num[i] == DFS_WHITE) {
            printf("Component %d, visit:", ++numComponent);
            dfs(i);
            printf("\n");
        }
        printf("There are %d connected components\n", numComponent);
    }

    // For the sample graph, the output is like this:
    // Component 1, visit: 0 1 2 3 4
    // Component 2, visit: 5
    // Component 3, visit: 6 7

    return 0;
}

#include <stdio.h>
const int inf = 0x3F3F3F3F;
int nv, na, vx,vy,nb;
int grafo[1010][1010];
int est[1010];
int vis[1010];
int caminhoMinimo(){
    int v;
    for(int i=0;i<nv;i++){
        est[i] = inf;
        vis[i] = 0;
    }
    est[0] = 0;
    est[1005] = inf;
    for(int i=0;i<nv;i++){
        v = 1005;
        for(int j=0;j<nv;j++){
            if(est[j]<est[v] && !vis[j])v = j;
        }
        if(v == 1005)break;
        vis[v]=1;
        for(int w=0;w<nv;w++){
            if(est[v] + grafo[v][w] < est[w])est[w] = est[v] + grafo[v][w];
        }
    }
    return est[nv-1];
}

int main(){
    int menor;
    scanf("%d %d",&nv,&na);
    nv += 2;
    for(int i=0;i<nv;i++){
        for(int j=0;j<nv;j++){
            grafo[i][j] = inf;
        }
    }
    for(int i=0;i<na;i++){
        scanf("%d %d %d",&vx,&vy,&nb);
        grafo[vx][vy] = nb;
        grafo[vy][vx] = nb;
    }
    menor = caminhoMinimo();
    printf("%d\n",menor);
    return 0;
}

/** -------------------------------------------------------------------------- **/
/** Dijkstra Vetor Matrix **/
/** -------------------------------------------------------------------------- **/

#include <stdio.h>
const int inf = 0x3F3F3F3F;
int nv, na, vx,vy,nb;
int grafo[1010][1010];
int est[1010];
int vis[1010];
int caminhoMinimo(){
    int v;
    for(int i=0;i<nv;i++){
        est[i] = inf;
        vis[i] = 0;
    }
    est[0] = 0;
    est[1005] = inf;
    for(int i=0;i<nv;i++){
        v = 1005;
        for(int j=0;j<nv;j++){
            if(est[j]<est[v] && !vis[j])v = j;
        }
        if(v == 1005)break;
        vis[v]=1;
        for(int w=0;w<nv;w++){
            if(est[v] + grafo[v][w] < est[w])est[w] = est[v] + grafo[v][w];
        }
    }
    return est[nv-1];
}

int main(){
    int menor;
    scanf("%d %d",&nv,&na);
    nv += 2;
    for(int i=0;i<nv;i++){
        for(int j=0;j<nv;j++){
            grafo[i][j] = inf;
        }
    }
    for(int i=0;i<na;i++){
        scanf("%d %d %d",&vx,&vy,&nb);
        grafo[vx][vy] = nb;
        grafo[vy][vx] = nb;
    }
    menor = caminhoMinimo();
    printf("%d\n",menor);
    return 0;
}

/** -------------------------------------------------------------------------- **/
/** Dijkstra priority_queue **/
/** -------------------------------------------------------------------------- **/

#include <stdio.h>
#include <vector>
#include <utility> //pair
#include <queue> //priority_queue

using namespace std;// para não precisar de std::função();

//Resumindo os nomes dos tipos, isso ajuda muito, pois fica bem mais rápido na hora de programar
typedef pair<int,int> ii;
typedef vector<ii> vii;

//Implementação da função de comparação da priority queue, é só anotar o formato kkk
struct Compare{
   int operator()(ii& p1, ii& p2){
      return p1.second < p2.second;
   }
};

//Esse formato da priority_queue é usado apenas quando se usa "estruturas" como elementos da reap
priority_queue<ii,vii, Compare > reap; //HEAP, lista de prioridade, retorna o maior valor do conjunto
vector<vii> grafo(1010);//Lista de adjacencia, vetor de vetor

const int inf = 0x3F3F3F3F; //Representação de infinito
int nv, na, vx,vy,nb; //Variáveis de apoio
int vst[1010], est[1010]; //vst - vetor para marcar se o vertice foi visitado e est - distancia até o vertice, ou seja estimativa

//Lembre-se que nem sempre o caminho minimo comoeça no vertice 0, geralemte e no vertice vi, informado na entrada
int Dijkstra(){
   int v,w,c,size;// Variáveis auxiliares
   //Inicializa todas as estimativas com infinito e marca todos os vetices como não visitados
   for(int i=0;i<nv;i++){
      vst[i] = 0;
      est[i] = inf;
   }
   //Incializa o vertice inicial como visitado, atribui distancia (ZERO) e insere-o na fila
   est[0] = 0;
   reap.push(make_pair(0,0));
   //Enquanto ouver vertices que não foram processados
   while(!reap.empty()){
      v = reap.top().first;reap.pop();//Pega o vertice de menor estimativa
      if(vst[v]){//Se o vertice já foi processador não poderá ser processador novamente
         continue;
      }
      vst[v] = 1;
      size = grafo[v].size();//Quantidade de vertices adjacentes a v
      for(int va=0;va<size;va++){//Para cada vertie adjacente
         w = grafo[v][va].first;//Vertice
         c = grafo[v][va].second;//Distancia de v a w
         //Estima a nova distancia para w
         if(est[v] + c < est[w]){
            est[w] = est[v] + c;
            reap.push(make_pair(w,-est[w]));
         }
      }
   }
   return est[nv-1];//Retorna a distancia do vertice 0 até o vertice nv - 1, que é o vertice de chegada
}

int main(){
    scanf("%d %d",&nv,&na);
    nv += 2;//Adiciona o vertice de inicio e de chegada
    //Ler as arestas
    for(int i=0;i<na;i++){
        scanf("%d %d %d",&vx,&vy,&nb);
        grafo[vx].push_back(make_pair(vy,nb));
        grafo[vy].push_back(make_pair(vx,nb));
    }
    printf("%d\n",Dijkstra());
    return 0;
}
